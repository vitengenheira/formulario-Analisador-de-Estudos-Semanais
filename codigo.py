# ðŸ“¦ Importando bibliotecas necessÃ¡rias
import streamlit as st
import numpy as np
import plotly.graph_objects as go
from fpdf import FPDF
from datetime import datetime
import os
import unicodedata

# ðŸ§  FunÃ§Ã£o para remover acentos (compatÃ­vel com fpdf)
def remover_acentos(txt):
    return unicodedata.normalize('NFKD', txt).encode('ASCII', 'ignore').decode('ASCII')

# ðŸ“Š FunÃ§Ã£o que gera o grÃ¡fico interativo com Plotly (cacheado)
@st.cache_data
def gerar_grafico(dias, horas):
    fig = go.Figure(data=[go.Bar(x=dias, y=horas, marker_color='skyblue')])
    fig.update_layout(
        title='Estudos da Semana',
        xaxis_title='Dias da Semana',
        yaxis_title='Horas Estudadas',
        yaxis=dict(range=[0, 12]),
        template='plotly_white'
    )
    return fig

# ðŸ“„ FunÃ§Ã£o que gera o PDF com dados convertidos em ASCII e inclui o grÃ¡fico
def gerar_pdf(nome_aluno, dias_semana, horas_estudo, media, maximo, minimo, avaliacao, nome_pdf, img_grafico):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    nome_ascii = remover_acentos(nome_aluno)
    avaliacao_ascii = remover_acentos(avaliacao)

    pdf.cell(200, 10, txt=f"Relatorio de Estudos - {nome_ascii}", ln=True)
    pdf.ln(5)
    pdf.cell(200, 10, txt="Horas de estudo por dia:", ln=True)

    for dia, horas in zip(dias_semana, horas_estudo):
        dia_ascii = remover_acentos(dia)
        pdf.cell(200, 10, txt=f"{dia_ascii}: {horas:.1f} horas", ln=True)

    pdf.ln(5)
    pdf.cell(200, 10, txt=f"Media diaria: {media:.2f} horas", ln=True)
    pdf.cell(200, 10, txt=f"Maximo: {maximo:.2f} horas", ln=True)
    pdf.cell(200, 10, txt=f"Minimo: {minimo:.2f} horas", ln=True)
    pdf.cell(200, 10, txt=f"Avaliacao: {avaliacao_ascii}", ln=True)

    pdf.ln(10)  # EspaÃ§o antes da imagem

    # Insere a imagem do grÃ¡fico no PDF
    pdf.image(img_grafico, x=10, w=pdf.w - 20)  # Largura do grÃ¡fico = largura da pÃ¡gina menos margens

    pdf.output(nome_pdf)

# ConfiguraÃ§Ã£o do app
st.set_page_config(page_title="Analisador de Estudos", layout="centered")
st.title("ðŸ“Š Analisador de Estudos Semanais")
st.write("Informe quantas horas vocÃª estudou em cada dia da semana. Veja o grÃ¡fico e baixe seu relatÃ³rio em PDF.")

# Entrada do nome do aluno
nome_aluno = st.text_input("Digite seu nome:")

# Dias da semana e coleta de horas
dias_semana = ["Segunda", "Terca", "Quarta", "Quinta", "Sexta", "Sabado", "Domingo"]
horas_estudo = []

# FormulÃ¡rio com sliders
with st.form("form_estudos"):
    for dia in dias_semana:
        horas = st.slider(f"{dia}:", 0.0, 12.0, step=0.5, key=dia)
        horas_estudo.append(horas)
    submitted = st.form_submit_button("Gerar AnÃ¡lise")

# Processamento apÃ³s submit
if submitted:
    if nome_aluno.strip() == "":
        st.warning("Por favor, digite seu nome para gerar o relatÃ³rio.")
    else:
        st.write("ðŸ”„ Processando dados...")

        media = np.mean(horas_estudo)
        maximo = np.max(horas_estudo)
        minimo = np.min(horas_estudo)

        # FunÃ§Ã£o de avaliaÃ§Ã£o com mensagens detalhadas
        def avaliar_semana(media):
            if media >= 6:
                return "Excelente ritmo de estudos! Continue assim e voce estara cada vez mais perto dos seus objetivos."
            elif media >= 4:
                return "Bom trabalho, mas voce pode melhorar! Tente organizar melhor sua rotina para ganhar mais consistencia."
            else:
                return "Voce estudou pouco essa semana. Procure estabelecer metas diarias e focar no seu objetivo. Voce consegue!"
        
        avaliacao = avaliar_semana(media)

        # Exibe avaliaÃ§Ã£o antes do grÃ¡fico
        st.subheader("ðŸ“‹ AvaliaÃ§Ã£o da Semana")
        st.markdown(f"""
**MÃ©dia de estudo por dia:** {media:.2f} horas  
**Resumo:** {avaliacao}
""")

        st.write("ðŸ“Š Gerando grÃ¡fico...")
        fig = gerar_grafico(dias_semana, horas_estudo)
        st.subheader("ðŸ“ˆ GrÃ¡fico de Estudo")
        st.plotly_chart(fig, use_container_width=True)

        # Salvar grÃ¡fico como imagem PNG para inserir no PDF
        img_path = "grafico_estudos.png"
        fig.write_image(img_path, format="png")

        # Preparar nome do PDF com timestamp
        data = datetime.now().strftime("%Y-%m-%d_%H-%M")
        nome_pdf = f"Relatorio_Estudos_{nome_aluno.replace(' ', '_')}_{data}.pdf"

        st.write("ðŸ“„ Gerando PDF...")
        gerar_pdf(nome_aluno, dias_semana, horas_estudo, media, maximo, minimo, avaliacao, nome_pdf, img_path)

        with open(nome_pdf, "rb") as file:
            st.success("âœ… RelatÃ³rio gerado com sucesso!")
            st.download_button("ðŸ“¥ Baixar PDF", data=file, file_name=os.path.basename(nome_pdf), mime="application/pdf")

